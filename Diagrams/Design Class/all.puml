@startuml buy_Subscription

scale 3
skinparam DefaultFontName B Nazanin
skinparam ArrowMessageAlignment right
skinparam classAttributeIconSize 0



class Subscription {
    Subscription()
}

class Channel{
    +List<Subscription> getSubscription()
    +double getFee(string subscriptionType)
}

class Member{
    +void addSubscription(Subscription newSubscription)
}

class User{
    +Double getCredit()
    +void decreaseCredit(double subscriptionFee)
}

class ContentFacade {
    +List<Subscription> seeSubscription(Member member)
}

class AccountFacade {
    +double getCredit(Member member)
    +void decreaseCredit(Member member, double subscriptionFee)
}

class MonetaryFacade {
    +void buySubscription(Member member, string subscriptionType)
}

class DatabaseFacade {
    +void save(Subscription newSubscription)
}

class SubscriptionFacade {
    +void seeSubscription(Member member)
    +void buySubscription(Member member, string subscriptionType)
}

class Channel{
    +void setManager(Member choosenMember)
}

class Member{
    +void promote(Manager newManager)
}

class Manager{
    Manager()
}

class setManagerFacade {
    +void setManager(Owner owner, Member choosenMember)
}

class ChannelFacade {
    +void setManager(Owner owner, Member choosenMember)
}


class DatabaseFacade {
    +void save(Manager newManager)
}

class Channel{
    +void setManager(Member choosenMember)
}

class Member{
    +void promote(Manager newManager)
}

class Manager{
    Manager()
}

class setManagerFacade {
    +void setManager(Owner owner, Member choosenMember)
}

class ChannelFacade {
    +void setManager(Owner owner, Member choosenMember)
}


class DatabaseFacade {
    +void save(Manager newManager)
}

class Content{
    Content()
}

class Channel{
    +void createContent(string contentInfo)
    -void publish(Content newContent)
}

class CreateContentFacade {
    +void createContent(Producer producer, string contentInfo)
}

class ContentFacade {
    +void createContent(string contentInfo)
}

class DatabaseFacade {
    +void save(Content newContent)
}

class Channel {
    -double totalProfit
    +void deposit()
    -double calculateProfit()
    +void report()

}

class User{
    +void deposit(double share * totalProfit)
}

class Member{
    +double getShare()
}

class MonetaryFacade {
    +void deposit()
}

class ChannelFacade {
    +void deposit()
    +void deposit(Member currentMember, double share * totalProfit)
}

class ChannelsCatalog {
    +List<Channel> getAllChannels()
}

class AccountFacade {
    +void deposit(Member currentMember, double share * totalProfit)
}

class User{
    +void addMembership(Member newMember)
}

class Channel{
    +Member addMember(User user)
}

class Member{
    Member()
}

class EntryFacade {
    +void joinChannel(User user, Channel foundChannel)
}

class JoinChannelFacade {
    +Channel searchChannel(string channelInfo)
    +void joinChannel(string channelInfo)
}

class ContentFacade {
    +Channel searchChannel()
}

class DatabaseFacade {
    +void save(Member newMember)
}

class Channel{
    +void removeMember(Member member)
}

class Member{
    +void leave()
}

class User{
    +void removeMembership(Member member)
}

class LeaveChannelFacade {
    +void leaveChannel(Member member)
}

class ContentFacade {
    +void leaveChannel(Member member)
}

class AccountFacade {
    +void removeMembership(Member member)
}

class DatabaseFacade {
    +void delete(Member member)
}

class LoginFacade {
    +void requestLogin()
    +void login(string username, string password)
}

class EntryFacade {
    +void login(string username, string password)
}

class DatabaseFacade {
    +User getUser(string username)
}

class LogoutFacade {
    +void requestLogout()
}

class EntryFacade {
    +void logout(User user)
}

class Channel{
    +List<Content> getContents()
    +void promoteContent(string contentInfo)
}

class Content {
    -string info
    +string getInfo()
    +void promote()
}

class PromoteContentFacade {
    +List<Content> getContents(Producer producer)
    +void promoteContents(Producer producer, string contentsInfo)
}

class ViewContentFacade {
    +List<Contents> getContents(Producer producer)
}

class ProduceContentFacade {
    +void promoteContents(Producer producer, string contentsInfo)
}

class ContentsCatalog {
    +List<Contents> getChannelsContent()
}

class Channel {
    +string getInfo()
}

class SearchFacade {
    +Channel searchChannel(string channelInfo)
}

class ContentFacade {
    +Channel searchChannel(string channelInfo)
}

class ChannelsCatalog {
    +List<Channel> getAllChannels()
}

class Content {
    -string info
    +string getInfo()
    +string getAccessLevel()
    +strimg getSummary()
}

class Channel {
    +List<Content> getContents()
    +Content selectContent(string contentInfo)
}

class Member {
    +string getAccessLevel()
}

class UIContentFacade {
    +List<Content> getContents(Member member)
    +Content selectContent(Member member, string contentInfo)
}

class ViewContentFacade {
    +List<Content> getContents(Member member)
    +Content selectContent(Member member, string contentInfo)
}

class ContentsCatalog {
    +List<Content> getChannelContents()
}

class Channel {
    +void setManagerProfit(Member member, double profit)
}

class Member {
    +void setProfit(double profit)
}

class Manager {
    -double profit
    +void setProfit(double profit)
}

class SetManagerFacade {
    +void setManagerProfit(Owner owner, Member member, double profit)
}

class ChannelFacade {
    +void setManagerProfit(Owner owner, Member member, double profit)
}

class Channel {
    +void setPrice(double owner)
    +void setSubscriptionPrice(string type, double price)
}

class SetPriceFacade {
    +void setPrice(Owner owner)
    +void setSubscriptionPrice(string type, double price)
}

class ChannelFacade {
    +void setPrice(Owner owner)
    +void setSubscriptionPrice(string type, double price)
}

class Email {
    Email()
    -string emailAddress
}

class Phone {
    -string phoneNumber
    Phone()
}

class User{
    -string username
    -string password
    User()
}

class SignupFacade {
    +void requestSignup()
    +void signup(string username, string password)
}

class EntryFacade {
    +void signup(string username, string password)
}

class DatabaseFacade {
    +boolean exists(string username)
    +void save(string email)
    +void save(string phone)
    +void save(User user)
}

class User {
    +void updateSubscriptions()
}

class Member {
    +void dailyDecrease()
}

class Subscription {
    -int remainingTime
    +void decreaseTime()
    }

class MonetaryFacade {
    +void updateSubscriptions()
}

class AccountFacade {
    +void updateSubscriptions()
}

class DatabaseFacade {
    +void delete(Subscription oldestSubscription)
}


UIContentFacade ..> ViewContentFacade :use
SearchFacade ..> ContentFacade :use
PromoteContentFacade ..> ViewContentFacade :use
PromoteContentFacade ..> ProduceContentFacade :use
ContentFacade ..> AccountFacade :use
CreateContentFacade ..> ContentFacade :use




SubscriptionFacade  ..>  ContentFacade :use
Subscription "              *" -down- "1" Channel

LogoutFacade ..> EntryFacade :use
LoginFacade ..> EntryFacade :use
EntryFacade ..> Email :use
EntryFacade ..> Phone :use
SignupFacade ..> EntryFacade :use


EntryFacade ..> DatabaseFacade :use
ContentFacade ..> DatabaseFacade :use
AccountFacade ..> DatabaseFacade :use

JoinChannelFacade ..> ContentFacade :use
JoinChannelFacade ..> EntryFacade :use
LeaveChannelFacade ..> ContentFacade :use
ChannelFacade ..> AccountFacade :use
ChannelFacade ..> ChannelsCatalog :use
ChannelFacade ..> DatabaseFacade :use
setManagerFacade ..> ChannelFacade :use
SetPriceFacade ..> ChannelFacade :use

SubscriptionFacade ..>  MonetaryFacade :use
MonetaryFacade ..> ChannelFacade :use
MonetaryFacade ..> AccountFacade :use
MonetaryFacade ..>  DatabaseFacade :use

EntryFacade ..> User :use
AccountFacade ..> User :use
potential_User "1" -left- "1" Email
potential_User "1" -right- "1" Phone
potential_User "1" -down- "1" User

Channel "1" -- "1" ContentsCatalog
ViewContentFacade ..> Channel :use
Channel "1" -- "*" Manager
MonetaryFacade .>  Channel :use
ProduceContentFacade ..> Channel :use
ContentFacade ..> Channel :use
ChannelFacade ..> Channel :use
EntryFacade ..> Channel :use
Channel "        *" -- "+" User
Channel "1" o-- "+" Member
Owner "1" -- "1" Channel
ChannelsCatalog "1" -- "*" Channel
ContentFacade ..> ChannelsCatalog :use
Content "*" --o "1" Channel
Producer "+" -- "1" Channel


ContentFacade ..> Member :use
MonetaryFacade .>  Member :use
Member "1" -- "*" User
Member "1" -- "         0..1" producer
Member "        1" -- "          0..1" Manager
Member "1" *- "*" Subscription

@enduml